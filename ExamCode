#! /usr/bin/python3
import subprocess

#Function created for esearch command. Allows user to choose the variable detailed in the brackets for the blast database and query alignment.
def esearch_command(taxonomyId, database, geneName, protein, proteinSpecific):
	
	esearchCommand="esearch" #esearch variable set.

	if database:
        	esearchCommand+=" -db " + database #If database is true then paranter added to esearch variable.

	esearchCommand+=" -query '" + taxonomyId # Assumes TaxonomyID is never empty and adds to esearch variable.

	if geneName:
        	esearchCommand+=" AND (" + geneName + "[Gene Name])" #If gene name is true then paranter added to esearch variable.

	if protein:
        	esearchCommand+=" AND (" + protein #If protein is true then paranter added to esearch variable.

        	if proteinSpecific:
                	esearchCommand+="[Protein]" #If protein is true and is protein specific then paranter added to esearch variable.

        	esearchCommand+=")" #Close query

	esearchCommand+="'" #Close esearch command
	
	return esearchCommand

#esearch to form BLAST database.Note try to narrow search to the hundreds to avoid long waiting times due to file sizes.
taxonomyID="txid5859" #Enter query taxonomy ID in quotes. Do not leave blank as script will not run. 
dataBase="Protein" #Database to be searched. Protein, gene or nucleotide
geneName="" #Enter gene name if required
protein="" #Enter protein name if required
proteinSpecific=False #If searching for a specific protein then True. Otherwise, False for protein family
esearchOutput="esearch_output" #Choose output file name

esearchOutput="esearch_output"
subprocess.call(esearch_command(taxonomyID,dataBase,geneName,protein,proteinSpecific) + " | efetch -format fasta > " + esearchOutput, shell=True) #Run esearch with search results piped into efetch to output search results in fasta format.

print(str("esearch complete. FASTA files ready for makeblastdb.")) #Print statement to show esearch and efetch complete.

blastdbOutput="blastdb_output" #Choose blast database ouput file name
dbtype="prot" #prot for protein and nucl for nucleotide
subprocess.call("makeblastdb -in " + esearchOutput + " -dbtype " + dbtype + " -out " + blastdbOutput, shell=True) #Blast database created in preparation of BLAST alignment
print(str("BLAST database succesfully formed")) #Print statement to show blast database has been made.

#esearch for query alignment in BLAST command. Uses function made earlier. Note try to narrow search to the hundreds to avoid long waiting times due to filesizes.
queryDatabase="Protein" #Database to be searched. Protein, gene or nucleotide
queryTaxonomyID="txid7227" #Enter query taxonomy ID in quotes. Do not leave blank as script will not run.
queryGeneName="COX1" #Enter gene name if required
queryProtein="" #Enter protein name if required
queryProteinSpecific=False #If searching for a specific protein then True. Otherwise, False for protein family
queryEsearchOutput="queryEsearchOutput" #Choose output name

subprocess.call(esearch_command(queryTaxonomyID,queryDatabase,queryGeneName,queryProtein,queryProteinSpecific) + " | efetch -format fasta > " +queryEsearchOutput, shell=True) #Query search asssigned to variable for BLAST alignment.
 
#Variables for BLAST alignment which the user can change. Query search for BLAST alignment is of the organism Drosophila melanogaster and the gene COX1. 
QueryType="Protein" #DNA or Protein. Nucleotide and Gene fall into the bracket of DNA.
DatabaseType="Protein" #DNA or Protein. Nucleotide and Gene fall into the bracket of DNA.
NumAlignments="100" #Set max number of alignments in BLAST alignemnt. Set to 100 by default.
BlastOutput="blast_output" #Choose output name

if DatabaseType=="DNA" and QueryType=="DNA":
	blast_command="blastn"
elif DatabaseType=="DNA" and QueryType=="Protein":
	blast_command="tblastn"
elif DatabaseType=="Protein" and QueryType=="DNA":
	blast_command="blastx"
elif DatabaseType=="Protein" and QueryType=="Protein":
	blast_command="blastp"

subprocess.call(blast_command + " -db " + blastdbOutput + " -query " + queryEsearchOutput + " -num_alignments " + NumAlignments + " -outfmt '7' > " + BlastOutput , shell=True)

print(str("BLAST alignment complete"))
print("Blast output at " + BlastOutput)
print(str("Script complete"))
